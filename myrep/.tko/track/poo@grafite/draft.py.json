{
    "patches": [
        {
            "label": "2025-10-27_18-19-28",
            "content": "@@ -3,558 +3,15 @@\n ass \n-Lead:%0A    def __init__(self, thickness: float, hardness: str, size: int):%0A        self.thickness = thickness%0A        self.hardness = hardness%0A        self.size = size%0A%0A    def usagePerSheet(self) -%3E int:%0A        %22%22%22Retorna o desgaste do grafite por folha de acordo com a dureza.%22%22%22%0A        desgaste = %7B%0A            %22HB%22: 1,%0A            %222B%22: 2,%0A            %224B%22: 4,%0A            %226B%22: 6%0A        %7D%0A        return desgaste.get(self.hardness, 1)%0A%0A    def _str_(self) -%3E str:%0A        return f%22%5B%7Bself.thickness%7D:%7Bself.hardness%7D:%7Bself.size%7D%5D%22%0A%0A%0Aclass Pencil\n+Grafite\n :%0A  \n@@ -41,24 +41,26 @@\n        self.\n+__\n thickness: f\n@@ -68,161 +68,32 @@\n oat \n-= 0.0%0A        self.tip: Lead %7C None = None%0A%0A    def insert(self, lead: Lead):%0A        if self.tip is not None:%0A            print(%22fail: ja existe\n+   #espessura do\n  grafite\n %22)%0A \n@@ -80,34 +80,32 @@\n ssura do grafite\n-%22)\n %0A            ret\n@@ -101,332 +101,40 @@\n     \n-    return%0A        if abs(lead.thickness - self.thickness) %3E 1e-6:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        self.tip = lead%0A%0A    def remove(self):%0A        if self.tip is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        self.tip = None%0A%0A    def writePage(self):\n+self.__hardness: str     #dureza\n %0A   \n@@ -142,1349 +142,136 @@\n     \n-if \n self.\n-tip is None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        desgaste = self.tip.usagePerSheet()%0A        if self.tip.size %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            self.tip.size = 10%0A            return%0A        if self.tip.size - desgaste %3C 10:%0A            self.tip.size = 10%0A            print(%22fail: folha incompleta%22)%0A            return%0A        self.tip.size -= desgaste%0A%0A    def _str_(self):%0A        grafite_str = str(self.tip) if self.tip else %22null%22%0A        return f%22calibre: %7Bself.thickness%7D, grafite: %7Bgrafite_str%7D%22%0A%0A%0Adef main():%0A    pencil = Pencil()%0A    while True:%0A        line = input()%0A        print(%22$%22 + line)%0A        args = line.split()%0A        if not args:%0A            continue%0A%0A        cmd = args%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break%0A        elif cmd == %22init%22:%0A            pencil.thickness = float(args%5B1%5D)%0A        elif cmd == %22insert%22:%0A            thickness = float(args%5B1%5D)%0A            hardness = args%5B2%5D%0A            size = int(args%5B3%5D)%0A            lead = Lead(thickness, hardness, size)%0A            pencil.insert(lead)%0A        elif cmd == %22remove%22:%0A            pencil.remove()%0A        elif cmd == %22write%22:%0A            pencil.writePage()%0A        elif cmd == %22show%22:%0A            print(pencil)%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0A%0Amain()\n+__size: int         #tamanho%0A%0A%0Aclass Lapizeira:%0A    def __init__(self, ponta = str):%0A        self.__ponta = None%0A%0A%0A%0A    %0A    %0A%0A\n",
            "lines": "16"
        },
        {
            "label": "2025-10-28_08-15-03",
            "content": "@@ -446,31 +446,29 @@\n 1)%0A%0A    def \n-_\n _str_\n-_\n (self) -%3E st\n@@ -1545,15 +1545,13 @@\n def \n-_\n _str_\n-_\n (sel\n",
            "lines": "92"
        },
        {
            "label": "2025-10-28_10-41-18",
            "content": "class Lead:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.thickness = thickness\n        self.hardness = hardness\n        self.size = size\n\n    def usagePerSheet(self) -> int:\n        \"\"\"Retorna o desgaste do grafite por folha de acordo com a dureza.\"\"\"\n        desgaste = {\n            \"HB\": 1,\n            \"2B\": 2,\n            \"4B\": 4,\n            \"6B\": 6\n        }\n        return desgaste.get(self.hardness, 1)\n\n    def __str__(self) -> str:\n        return f\"[{self.thickness}:{self.hardness}:{self.size}]\"\n\n\nclass Pencil:\n    def __init__(self):\n        self.thickness: float = 0.0\n        self.tip: Lead | None = None\n\n    def insert(self, lead: Lead):\n        if self.tip is not None:\n            print(\"fail: ja existe grafite\")\n            return\n        if abs(lead.thickness - self.thickness) > 1e-6:\n            print(\"fail: calibre incompativel\")\n            return\n        self.tip = lead\n\n    def remove(self):\n        if self.tip is None:\n            print(\"fail: nao existe grafite\")\n            return\n        self.tip = None\n\n    def writePage(self):\n        if self.tip is None:\n            print(\"fail: nao existe grafite\")\n            return\n        desgaste = self.tip.usagePerSheet()\n        if self.tip.size <= 10:\n            print(\"fail: tamanho insuficiente\")\n            self.tip.size = 10\n            return\n        if self.tip.size - desgaste < 10:\n            self.tip.size = 10\n            print(\"fail: folha incompleta\")\n            return\n        self.tip.size -= desgaste\n\n    def __str__(self):\n        grafite_str = str(self.tip) if self.tip else \"null\"\n        return f\"calibre: {self.thickness}, grafite: {grafite_str}\"\n\n\ndef main():\n    pencil = Pencil()\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split()\n        if not args:\n            continue\n\n        cmd = args[0]\n\n        if cmd == \"end\":\n            break\n        elif cmd == \"init\":\n            pencil.thickness = float(args[1])\n        elif cmd == \"insert\":\n            thickness = float(args[1])\n            hardness = args[2]\n            size = int(args[3])\n            lead = Lead(thickness, hardness, size)\n            pencil.insert(lead)\n        elif cmd == \"remove\":\n            pencil.remove()\n        elif cmd == \"write\":\n            pencil.writePage()\n        elif cmd == \"show\":\n            print(pencil)\n        else:\n            print(\"fail: comando invalido\")\n\n\nmain()",
            "lines": "92"
        }
    ]
}
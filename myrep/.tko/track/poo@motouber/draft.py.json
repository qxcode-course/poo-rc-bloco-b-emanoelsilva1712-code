{
    "patches": [
        {
            "label": "2025-10-28_00-33-29",
            "content": "@@ -1,3144 +0,0 @@\n-class Pessoa:%0A    def __init__(self, nome: str, dinheiro: int):%0A        self.__nome = nome%0A        self.__dinheiro = dinheiro%0A%0A    def getNome(self) -%3E str:%0A        return self.__nome%0A%0A    def getDinheiro(self) -%3E int:%0A        return self.__dinheiro%0A%0A    def pagar(self, valor: int) -%3E int:%0A        %22%22%22Retorna quanto a pessoa conseguiu pagar e reduz seu dinheiro.%22%22%22%0A        if self.__dinheiro %3E= valor:%0A            self.__dinheiro -= valor%0A            return valor%0A        restante = self.__dinheiro%0A        self.__dinheiro = 0%0A        return restante%0A%0A    def receber(self, valor: int):%0A        %22%22%22Recebe dinheiro (incrementa o saldo).%22%22%22%0A        self.__dinheiro += valor%0A%0A%0Aclass Moto:%0A    def __init__(self):%0A        self.__custo = 0%0A        self.__motorista: Pessoa %7C None = None%0A        self.__passageiro: Pessoa %7C None = None%0A%0A    def setDriver(self, nome: str, dinheiro: int):%0A        self.__motorista = Pessoa(nome, dinheiro)%0A%0A    def setPass(self, nome: str, dinheiro: int):%0A        if self.__motorista is None:%0A            print(%22fail: no driver in the moto%22)%0A            return%0A        self.__passageiro = Pessoa(nome, dinheiro)%0A%0A    def drive(self, km: int):%0A        if self.__passageiro is None:%0A            print(%22fail: no passenger in the moto%22)%0A            return%0A        self.__custo += km%0A%0A    def leavePass(self):%0A        if self.__passageiro is None:%0A            print(%22fail: no passenger to leave%22)%0A            return%0A        pago = self.__passageiro.pagar(self.__custo)%0A        falta = self.__custo - pago%0A        if falta %3E 0:%0A            print(%22fail: Passenger does not have enough money%22)%0A        if self.__motorista is not None:%0A            self.__motorista.receber(pago)  # motorista recebe tudo%0A        print(f%22%7Bself.__passageiro.getNome()%7D:%7Bself.__passageiro.getDinheiro()%7D left%22)%0A        self.__custo = 0%0A        self.__passageiro = None%0A%0A    def show(self):%0A        driver = f%22%7Bself.__motorista.getNome()%7D:%7Bself.__motorista.getDinheiro()%7D%22 if self.__motorista else %22None%22%0A        passenger = f%22%7Bself.__passageiro.getNome()%7D:%7Bself.__passageiro.getDinheiro()%7D%22 if self.__passageiro else %22None%22%0A        print(f%22Cost: %7Bself.__custo%7D, Driver: %7Bdriver%7D, Passenger: %7Bpassenger%7D%22)%0A%0Aimport sys%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        try:%0A            line = input()%0A            print(%22$%22 + line)%0A            args = line.split()%0A            if not args:%0A                continue%0A%0A            cmd = args%5B0%5D%0A%0A            if cmd == %22end%22:%0A                break%0A            elif cmd == %22show%22:%0A                moto.show()%0A            elif cmd == %22setDriver%22:%0A                nome = args%5B1%5D%0A                dinheiro = int(args%5B2%5D)%0A                moto.setDriver(nome, dinheiro)%0A            elif cmd == %22setPass%22:%0A                nome = args%5B1%5D%0A                dinheiro = int(args%5B2%5D)%0A                moto.setPass(nome, dinheiro)%0A            elif cmd == %22drive%22:%0A                km = int(args%5B1%5D)%0A                moto.drive(km)%0A            elif cmd == %22leavePass%22:%0A                moto.leavePass()%0A            else:%0A                print(%22fail: comando invalido%22)%0A%0A        except EOFError:%0A            break%0Amain()\n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_08-32-24",
            "content": "@@ -1432,25 +1432,16 @@\n  return%0A\n-        %0A\n         \n@@ -1485,16 +1485,16 @@\n _custo)%0A\n+\n         \n@@ -1521,25 +1521,16 @@\n  - pago%0A\n-        %0A\n         \n@@ -1607,25 +1607,16 @@\n money%22)%0A\n-        %0A\n         \n@@ -1664,12 +1664,15 @@\n     \n-# O \n+self.__\n moto\n@@ -1680,177 +1680,26 @@\n ista\n- \n+.\n recebe\n- o custo total da corrida,%0A            # independentemente de quanto o passageiro pagou.%0A            # (pago + falta) %C3%A9 sempre == self.__custo%0A            self.__\n+r(pago)  # \n moto\n@@ -1707,40 +1707,20 @@\n ista\n-.\n+ \n recebe\n-r(pago + falta) %0A        \n+ tudo\n %0A   \n@@ -2198,16 +2198,27 @@\n ger%7D%22)%0A%0A\n+import sys%0A\n %0Adef mai\n@@ -3083,24 +3083,25 @@\n  invalido%22)%0A\n+%0A\n         exce\n@@ -3109,24 +3109,24 @@\n t EOFError:%0A\n+\n             \n@@ -3135,162 +3135,8 @@\n eak%0A\n-        except Exception:%0A            # Captura outros erros (ex: int('abc'), falta de args)%0A            print(%22fail: comando ou argumentos invalidos%22)%0A%0A%0A\n main\n",
            "lines": "102"
        },
        {
            "label": "2025-10-28_10-39-11",
            "content": "class Pessoa:\n    def __init__(self, nome: str, dinheiro: int):\n        self.__nome = nome\n        self.__dinheiro = dinheiro\n\n    def getNome(self) -> str:\n        return self.__nome\n\n    def getDinheiro(self) -> int:\n        return self.__dinheiro\n\n    def pagar(self, valor: int) -> int:\n        \"\"\"Retorna quanto a pessoa conseguiu pagar e reduz seu dinheiro.\"\"\"\n        if self.__dinheiro >= valor:\n            self.__dinheiro -= valor\n            return valor\n        restante = self.__dinheiro\n        self.__dinheiro = 0\n        return restante\n\n    def receber(self, valor: int):\n        \"\"\"Recebe dinheiro (incrementa o saldo).\"\"\"\n        self.__dinheiro += valor\n\n\nclass Moto:\n    def __init__(self):\n        self.__custo = 0\n        self.__motorista: Pessoa | None = None\n        self.__passageiro: Pessoa | None = None\n\n    def setDriver(self, nome: str, dinheiro: int):\n        self.__motorista = Pessoa(nome, dinheiro)\n\n    def setPass(self, nome: str, dinheiro: int):\n        if self.__motorista is None:\n            print(\"fail: no driver in the moto\")\n            return\n        self.__passageiro = Pessoa(nome, dinheiro)\n\n    def drive(self, km: int):\n        if self.__passageiro is None:\n            print(\"fail: no passenger in the moto\")\n            return\n        self.__custo += km\n\n    def leavePass(self):\n        if self.__passageiro is None:\n            print(\"fail: no passenger to leave\")\n            return\n        \n        pago = self.__passageiro.pagar(self.__custo)\n        falta = self.__custo - pago\n        \n        if falta > 0:\n            print(\"fail: Passenger does not have enough money\")\n        \n        if self.__motorista is not None:\n            # O motorista recebe o custo total da corrida,\n            # independentemente de quanto o passageiro pagou.\n            # (pago + falta) \u00e9 sempre == self.__custo\n            self.__motorista.receber(pago + falta) \n        \n        print(f\"{self.__passageiro.getNome()}:{self.__passageiro.getDinheiro()} left\")\n        self.__custo = 0\n        self.__passageiro = None\n\n    def show(self):\n        driver = f\"{self.__motorista.getNome()}:{self.__motorista.getDinheiro()}\" if self.__motorista else \"None\"\n        passenger = f\"{self.__passageiro.getNome()}:{self.__passageiro.getDinheiro()}\" if self.__passageiro else \"None\"\n        print(f\"Cost: {self.__custo}, Driver: {driver}, Passenger: {passenger}\")\n\n\ndef main():\n    moto = Moto()\n    while True:\n        try:\n            line = input()\n            print(\"$\" + line)\n            args = line.split()\n            if not args:\n                continue\n\n            cmd = args[0]\n\n            if cmd == \"end\":\n                break\n            elif cmd == \"show\":\n                moto.show()\n            elif cmd == \"setDriver\":\n                nome = args[1]\n                dinheiro = int(args[2])\n                moto.setDriver(nome, dinheiro)\n            elif cmd == \"setPass\":\n                nome = args[1]\n                dinheiro = int(args[2])\n                moto.setPass(nome, dinheiro)\n            elif cmd == \"drive\":\n                km = int(args[1])\n                moto.drive(km)\n            elif cmd == \"leavePass\":\n                moto.leavePass()\n            else:\n                print(\"fail: comando invalido\")\n        except EOFError:\n            break\n        except Exception:\n            # Captura outros erros (ex: int('abc'), falta de args)\n            print(\"fail: comando ou argumentos invalidos\")\n\n\nmain()",
            "lines": "112"
        }
    ]
}